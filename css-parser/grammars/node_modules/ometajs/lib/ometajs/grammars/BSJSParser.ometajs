ometa BSJSParser {
  space        = ^@space | /^\/\/[^\n]*/ | /^\/\*(.|[\r\n])*?\*\//,
  nameFirst    = /^[a-z$_]/i,
  nameLast     = /^[a-z0-9$_]/i,
  iName        = /^[a-z$_][a-z0-9$_]*/i,
  isKeyword :x = ?BSJSParser._isKeyword(x),
  name         = @iName:n ~isKeyword(n)                                               -> [#name, n],
  keyword      = @iName:k isKeyword(k)                                                -> [k, k],
  hexDigit     = @char:x {BSJSParser.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)  -> v,
  hexLit       = hexLit:n hexDigit:d                                                  -> (n * 16 + d)
               | hexDigit,
  number       = /^0x[0-9a-f]+/:n                                                      -> [#number, parseInt(n)]
               | /^\d+((\.|[eE][\-+]?)\d+)?/:f                                         -> [#number, parseFloat(f)],
  escapeChar   = <'\\' char>:s -> {
                 switch (s) {
                   case '\\"': return '"';
                   case '\\\'': return '\'';
                   case '\\n': return '\n';
                   case '\\r': return '\r';
                   case '\\t': return '\t';
                   case '\\b': return '\b';
                   case '\\f': return '\f';
                   case '\\\\': return '\\';
                   default: return s.charAt(1);
                 }
               }
               | <'\\' ('u' hexDigit hexDigit hexDigit hexDigit
                      | 'x' hexDigit hexDigit)>:s -> {
                 JSON.parse('"' + s + '"')
               },
  str          = /^'([^'\\]|\\.)*'/:s -> {
                 function swap(quote) {
                   return quote === '"' ? '\'' : '"';
                 }
                 return [
                   #string,
                   JSON.parse(preparseString(s.replace(/["']/g, swap)))
                       .replace(/["']/g, swap)
                 ];
               }
               | /^"([^"\\]|\\.)*"/:s -> [#string, JSON.parse(preparseString(s))],
  special      = /^(>>>|<<<|!==|===|&&=|\|\|=|!=|==|>=|<=|\+\+|\+=|--|-=|\*=|\/=|%=|&&|\|\||>>|&=|\|=|\^=|[\(\){}\[\],;?:><=\+\-\*\/%&|\^~\.!])/:s -> [s, s],
  token        = @spaces (@name | @keyword | @number | @str | @special),
  toks         = @token*:ts @spaces end                                                -> ts,
  spacesNoNl   = (~'\n' space)*,

  expr = commaExpr,
  commaExpr = commaExpr:e1 "," asgnExpr:e2 -> [#binop, ",", e1, e2]
            | asgnExpr,
  asgnExpr     = condExpr:e ( "="   asgnExpr:rhs                                     -> [#set,  e, rhs]
                            | ( "+=" | "-=" | "*=" | "/="
                              | "&&=" | "||="
                              | "%=" | "<<=" | ">>=" | ">>>="
                              | "&=" | "^="  | "|=" ):op asgnExpr:rhs                -> [#mset, e, op.slice(0, -1), rhs]
                            | empty                                                  -> e
                            ),
  condExpr     = orExpr:e ( "?"   condExpr:t   ":" condExpr:f                        -> [#condExpr, e, t, f]
                          | empty                                                    -> e
                          ),
  orExpr       = orExpr:x "||" andExpr:y -> [#binop, '||', x, y]
               | andExpr,
  andExpr      = andExpr:x "&&" bitExpr:y -> [#binop, '&&', x, y]
               | bitExpr,
  bitExpr      = bitExpr:x ("|"|"^"|"&"):op eqExpr:y -> [#binop, op, x, y]
               | eqExpr,
  eqExpr       = eqExpr:x ("=="|"!="|"==="|"!=="):op relExpr:y                       -> [#binop, op,  x, y]
               | relExpr,
  relExpr      = relExpr:x (">"|">="|"<"|"<="|"instanceof"|"in"):op shiftExpr:y      -> [#binop, op,  x, y]
               | shiftExpr,
  shiftExpr    = shiftExpr (">>>"|"<<<"|">>"):op addExpr:y                           -> [#binop, op,  x, y]
               | addExpr,
  addExpr      = addExpr:x ("+"|"-"):op mulExpr:y                                    -> [#binop, op,  x, y]
               | mulExpr,
  mulExpr      = mulExpr:x ("*"|"/"|"%"):op unary:y                                  -> [#binop, op,  x, y]
               | unary,
  unary        = ("-"|"+"):op postfix:p                                              -> [#unop,  op,     p]
               | ("--"|"++"):op postfix:p                                            -> [#preop, op,     p]
               | ("!"|"~"|"void"|"delete"|"typeof"):op unary:p                       -> [#unop,  op,     p]
               | postfix,
  postfix      = primExpr:p ( spacesNoNl ("++"|"--"):op                              -> [#postop, op, p]
                            | empty                                                  -> p
                            ),

  dotProp :p   = "[" expr:i "]"                                                      -> [#getp, i, p]
               | "." "name":f                                                        -> [#getp, [#string, f], p]
               | "." spaces @iName:f isKeyword(f)                                    -> [#getp, [#string, f], p],

  primExpr     = primExpr:p ( "(" listOf(#asgnExpr, ','):as ")"                       -> [#call, p].concat(as)
                            | "." "name":m "(" listOf(#asgnExpr, ','):as ")"          -> [#send, m, p].concat(as)
                            | "." spaces @iName:m "(" listOf(#asgnExpr, ','):as ")"
                              isKeyword(m)                                            -> [#send, m, p].concat(as)
                            | dotProp(p):r -> r
                            )
               | memberExpr,
  memberExpr   = memberExpr:p dotProp(p):r -> r
               | newExpr,
  newExpr      = "new" memberExpr:n "(" listOf(#asgnExpr, ","):as ")"                -> [#new, n].concat(as)
               | "new" memberExpr:n                                                  -> [#new, n]
               | primExprHd,
  primExprHd   = "(" expr:e ")"                                                      -> e
               | "this"                                                              -> [#this]
               | "name":n                                                            -> [#get, n]
               | "number":n                                                          -> [#number, n]
               | "string":s                                                          -> [#string, s]
               | func(true)
               | "new" "name":n "(" listOf(#asgnExpr, ','):as ")"                    -> [#new, n].concat(as)
               | "new" "name":n                                                      -> [#new, n]
               | "[" listOf(#asgnExpr, ','):es "]"                                   -> [#arr].concat(es)
               | json
               | re,
  json         = "{" listOf(#jsonBinding, ','):bs "}"                                -> [#json].concat(bs),
  jsonBinding  = jsonPropName:n ":" asgnExpr:v                                       -> [#binding, n, v],
  jsonPropName = "name" | "number" | "string" | spaces @iName:n isKeyword(n)         -> n,
  re           = spaces <'/' reBody '/' reFlag*>:x                                   -> [#regExp, x],
  reBody       = re1stChar reChar*,
  re1stChar    = ~('*' | '\\' | '/' | '[') reNonTerm
               | escapeChar
               | reClass,
  reChar       = re1stChar | '*',
  reNonTerm    = ~('\n' | '\r') char,
  reClass      = '[' reClassChar* ']',
  reClassChar  = ~('[' | ']') reChar,
  reFlag       = nameFirst,
  formal       = spaces "name",
  func :anon   = "function" (?(anon) "name")?:n
                 "(" listOf(#formal, ','):fs ")" "{" srcElems:body "}"               -> [#func, n || null, fs, body],
  sc           = spacesNoNl ('\n' | &'}' | end)
               | ";",
  binding      = "name":n "=" asgnExpr:v                                             -> [n, v]
               | "name":n                                                            -> [n],
  block        = "{" srcElems:ss "}"                                                 -> ss,
  vars         = "var" listOf(#binding, ','):bs                                      -> [#var].concat(bs),
  stmt         = block
               | vars:bs sc                                                          -> bs
               | "if" "(" expr:c ")" stmt:t ( "else" stmt
                                            | empty -> [#get, 'undefined'] ):f       -> [#if, c, t, f]
               | "while" "(" expr:c ")" stmt:s                                       -> [#while,   c, s]
               | "do" stmt:s "while" "(" expr:c ")" sc                               -> [#doWhile, s, c]
               | "for" "(" ( vars
                           | expr
                           | empty -> [#get, 'undefined'] ):i
                       ";" ( expr
                           | empty -> [#get, 'true']      ):c
                       ";" ( expr
                           | empty -> [#get, 'undefined'] ):u
                       ")" stmt:s                                                    -> [#for, i, c, u, s]
               | "for" "(" ( "var" binding:b "in" asgnExpr:e                         -> [ [#var, b], e ]
                           | expr:e ?(e[0] === 'binop' && e[1] === 'in')             -> { e.slice(2) }
                           ):cond
                       ")" stmt:s                                                    -> [#forIn, cond[0], cond[1], s]
               | "switch" "(" expr:e ")" "{"
                   ( "case" asgnExpr:c ":" srcElems:cs -> [#case, c, cs]
                   | "default"     ":" srcElems:cs -> [#default, cs] )*:cs
                 "}"                                                                 -> [#switch, e].concat(cs)
               | "break" sc                                                          -> [#break]
               | "continue" sc                                                       -> [#continue]
               | "throw" spacesNoNl asgnExpr:e sc                                    -> [#throw, e]
               | "try" block:t "catch" "(" "name":e ")" block:c
                             ( "finally" block
                             | empty -> [#get, 'undefined'] ):f                      -> [#try, t, e, c, f]
               | "return" ( expr
                          | empty -> [#get, 'undefined'] ):e sc                      -> [#return, e]
               | "with" "(" expr:x ")" stmt:s                                        -> [#with, x, s]
               | @iName:label ":" stmt:s                                             -> [#label, label, s]
               | expr:e sc                                                           -> e
               | ";"                                                                 -> [#get, "undefined"],
  srcElem      = (func(false) | stmt):s                                              -> [#stmt, s],
  srcElems     = srcElem*:ss                                                         -> [#begin].concat(ss),

  topLevel     = srcElems:r spaces end                                               -> r
}
BSJSParser.hexDigits = "0123456789abcdef"
BSJSParser.keywords  = { }
var keywords = ["break", "case", "catch", "continue", "default", "delete", "do", "else", "finally", "for", "function", "if", "in",
                "instanceof", "new", "return", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with", "ometa"]
for (var idx = 0; idx < keywords.length; idx++)
  BSJSParser.keywords[keywords[idx]] = true
BSJSParser._isKeyword = function(k) { return BSJSParser.keywords.hasOwnProperty(k) }

function preparseString(str) {
  return str.replace(/\\x([0-9a-f]{2})/ig, '\\u00$1');
}


ometa BSSemActionParser <: BSJSParser {
  curlySemAction = "{" asgnExpr:r sc "}" spaces                              -> r
                 | "{" (srcElem:s &srcElem -> s)*:ss
                       ( asgnExpr:r sc -> [#return, r] | srcElem):s {ss.push(s)}
                   "}" spaces                                                -> [#send, #call,
                                                                                        [#func, null, [], [#begin].concat(ss)],
                                                                                        [#this]],
  semAction      = curlySemAction
                 | primExpr:r spaces                                         -> r
}

